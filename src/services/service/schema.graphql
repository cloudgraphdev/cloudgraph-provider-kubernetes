type k8sService {
  id: String! @id @search(by: [hash, regexp])
  apiVersion: String @search(by: [hash, regexp])
  kind: String @search(by: [hash, regexp])
  context: String
  metadata: k8sMetadata
  spec: k8sServiceSpec
  status: k8sServiceStatus
  namespace: [k8sNamespace] @hasInverse(field: service)
}

type k8sServiceSpec {
  allocateLoadBalancerNodePorts: Boolean @search 
  clusterIp: String @search(by: [hash, regexp])
  clusterIps: [String] @search(by: [hash, regexp])
  externalIps: [String] @search(by: [hash, regexp])
  externalName: String @search(by: [hash, regexp])
  externalTrafficPolicy: String @search(by: [hash, regexp])
  healthCheckNodePort: Int @search 
  internalTrafficPolicy: String @search(by: [hash, regexp])
  ipFamilies: [String] @search(by: [hash, regexp])
  ipFamilyPolicy: String @search(by: [hash, regexp])
  loadBalancerClass: String @search(by: [hash, regexp])
  loadBalancerIp: String @search(by: [hash, regexp])
  loadBalancerSourceRanges: [String] @search(by: [hash, regexp])
  ports: [k8sServiceSpecPort] 
  publishNotReadyAddresses: Boolean @search 
  selector: [k8sKeyValueArray] 
  sessionAffinity: String @search(by: [hash, regexp])
  sessionAffinityConfig: k8sServiceSessionAffinityConfig 
  type: String @search(by: [hash, regexp])
}

type k8sServiceStatus {
  conditions: [k8sServiceCondition]
  loadBalancer: k8sServiceLoadBalancer
}

type k8sServiceSpecPort {
  id: String! @id
  appProtocol: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  nodePort: Int @search
  port: Int @search
  protocol: String @search(by: [hash, regexp])
  targetPort: String @search(by: [hash, regexp])
}

type k8sServiceSessionAffinityConfig {
  clientIp: k8sServiceSessionAffinityConfigClientIp
}

type k8sServiceSessionAffinityConfigClientIp {
  timeoutSeconds: Int @search
}

type k8sServiceCondition {
  id: String! @id @search(by: [hash, regexp])
  lastTransitionTime: String @search(by: [hash, regexp])
  observedGeneration: Int @search
  message: String @search(by: [hash, regexp])
  reason: String @search(by: [hash, regexp])
  status: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
}

type k8sServiceLoadBalancer {
  ingress: [k8sServiceLoadBalancerIngress]
}

type k8sServiceLoadBalancerIngress {
  id: String! @id @search(by: [hash, regexp])
  hostname: String @search(by: [hash, regexp])
  ip: String @search(by: [hash, regexp])
  ports: [k8sServiceLoadbalancerIngressPort]
}

type k8sServiceLoadbalancerIngressPort {
  id: String! @id @search(by: [hash, regexp])
  error: String @search(by: [hash, regexp])
  port: Int @search
  protocol: String @search(by: [hash, regexp])
}
