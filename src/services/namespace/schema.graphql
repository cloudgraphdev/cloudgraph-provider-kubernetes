type k8sNamespace {
  id: String! @id @search(by: [hash, regexp])
  context: String! @search(by: [hash, regexp])
  apiVersion: String @search(by: [hash, regexp])
  kind: String @search(by: [hash, regexp])
  metadata: k8sMetadata
  spec: k8sNamespaceSpec
  status: k8sNamespaceStatus
  networkPolicies: [k8sNetworkPolicy] @hasInverse(field: namespace)
  nodes: [k8sNode] @hasInverse(field: namespace)
  pods: [k8sPod] @hasInverse(field: namespace)
  deployments: [k8sDeployment] @hasInverse(field: namespace)
  ingresses: [k8sIngress] @hasInverse(field: namespace)
  secrets: [k8sSecret] @hasInverse(field: namespace)
  services: [k8sService] @hasInverse(field: namespace)
  serviceAccounts: [k8sServiceAccount] @hasInverse(field: namespace)
  storageClasses: [k8sStorageClass] @hasInverse(field: namespace)
  persistentVolumes: [k8sPersistentVolume] @hasInverse(field: namespace)
  persistentVolumeClaims: [k8sPersistentVolumeClaim] @hasInverse(field: namespace)
  roles: [k8sRole] @hasInverse(field: namespace)
  jobs: [k8sJob] @hasInverse(field: namespace)
  cronJobs: [k8sCronJob] @hasInverse(field: namespace)
}

type k8sNamespaceSpec @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  finalizers: [String] @search(by: [hash, regexp])
}

type k8sNamespaceStatus @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  phase: String @search(by: [hash, regexp])
  conditions: [k8sConditions]
}