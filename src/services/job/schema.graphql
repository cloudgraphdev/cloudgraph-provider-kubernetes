type k8sJob {
  id: String! @id @search(by: [hash, regexp])
  context: String! @search(by: [hash, regexp])
  apiVersion: String @search(by: [hash, regexp])
  kind: String @search(by: [hash, regexp])
  metadata: k8sMetadata
  spec: k8sJobSpec
  status: k8sJobStatus
  namespace: [k8sNamespace] @hasInverse(field: job)
}

type k8sJobSpec {
  activeDeadlineSeconds: Int @search
  backoffLimit: Int @search
  completionMode: String @search(by: [hash, regexp])
  completions: Int @search
  manualSelector: Boolean @search
  parallelism: Int @search
  selector: k8sJobSelector
  suspend: Boolean @search
  template: k8sJobTemplate
  ttlSecondsAfterFinished: Int @search
}

type k8sJobStatus {
  active: Int @search
  completedIndexes: String @search(by: [hash, regexp])
  completionTime: String @search(by: [hash, regexp])
  conditions: [k8sPersistentVolumeClaimCondition]
  failed: Int @search
  startTime: String @search(by: [hash, regexp])
  succeeded: Int @search
  uncountedTerminatedPods: k8sJobUncountedTerminatedPods
}

type k8sJobSelector {
  matchExpressions: [k8sDeploymentExpressions]
  matchLabels: [k8sKeyValueArray]
}

type k8sJobTemplate {
  metadata: k8sMetadata
  spec: k8sPodSpec
}

type k8sJobUncountedTerminatedPods {
  failed: [String] @search(by: [hash, regexp])
  succeeded: [String] @search(by: [hash, regexp])
}